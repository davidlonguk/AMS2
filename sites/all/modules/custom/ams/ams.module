<?php
/**
* @file
* Module file for ams.
* Provices custom Functionality for an Asset Management System.
*/

/**
* Implements hook_help().
*/
function ams_help($path, $arg) {
	switch ($path) {
		case 'admin/help#ams':{
			$ret_val = '<h3>' . t('About') . '</h3>';
			$ret_val .= '<p>' . t('The Asset Management System helps manage video metadata and passes data to and from thePlatform.') . '</p>';
			return $ret_val;
			break;
		}
	}
}

/**
* Implements hook_permission().
*/
function ams_permission() {
	return array(
		'administer ams'=> array(
			'title' => t('Administer AMS'),
			'description' => t('Perform Administrative tasks on AMS.')			
		),
		'edit ams'=> array(
			'title' => t('Edit AMS'),
			'description' => t('Perform Content Editor tasks on AMS.')			
		)
		
	);
}
/**
* Implements hook_menu().
*/
function ams_menu() {
	$items = array();
	
	// Admin configuration group.
	$items['admin/config/ams'] = array(
		'title' => 'Video Asset Management',
		'description' => 'Administer Video Asset Management System.',
		'access arguments' => array('administer ams'),
	);
	
	// Admin configuration - Settings.
	$items['admin/config/ams/manage'] = array(
		'title' => 'Manage Asset Management Settings',
		'description' => 'Manage Video Asset Management settings and configuration.',
		'access arguments' => array('administer ams'),
		'page callback' => 'drupal_get_form', 
		'page arguments' => array('ams_admin_settings_form'),
	);
	
	return $items;
}

/**
* Implements hook_form().
*/
function ams_admin_settings_form($node, &$form_state) {
	$form = array();
	
	$form['overview'] = array(
		'#markup' => t('This interface allows administrators to manage video AMS settings.'),
		'#prefix' => '<p>',
		'#suffix' => '</p>',
	);
	
	$form['import-publish_control'] = array(
		'#title' => t('Import / Publish Control'),
		'#description' => t('Control the importing or publishing of data between the AMS and thePlatform.'),
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	$form['import-publish_control']['ams_editor_import'] = array(
		'#title' => t('Editor Imports'),
		'#description' => t('Enable Editors to import new records from thePlaform.'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('ams_editor_import'),
	);
	$form['import-publish_control']['ams_editor_publish'] = array(
		'#title' => t('Editor Publishing'),
		'#description' => t('Enable Editors to publish metadata to thePlaform.'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('ams_editor_publish'),
	);
	$form['import-publish_control']['ams_blank_records'] = array(
		'#title' => t('Create Blank Records'),
		'#description' => t('If enabled when publishing if no match found a blank or shell record is created in thePlatform.'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('ams_blank_records'),
	);
	/*
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	*/
	
	// return $form;
	return system_settings_form($form);
}
/**
* Process Asset Management Admin Settings form submission.

function ams_admin_settings_form_submit($form, &$form_state) {
	// Rebuild the form.
	$form_state['rebuild'] = TRUE;
	
	// Save Asset Management setting variables.
	variable_set('ams_editor_import', $form_state['values']['ams_editor_import']);
	variable_set('ams_editor_publish', $form_state['values']['ams_editor_publish']);
	variable_set('ams_blank_records', $form_state['values']['ams_blank_records']);
	// Notify user
	drupal_set_message(t('Fan-daby-dozy - settings saved'));
}*/

    
/**
 * Implements hook_feeds_importer_default().
 */
function ams_feeds_importer_default() {
    $export = array();

    $feeds_importer = new stdClass();
    $feeds_importer->disabled = FALSE;
    $feeds_importer->api_version = 1;
    $feeds_importer->id = 'ams_csv_shows';
    $feeds_importer->config = array(
      'name' => 'AMS 1 Shows',
      'description' => 'CSV import of AMS 1 shows files',
      'fetcher' => array(
        'plugin_key' => 'FeedsFileFetcher',
        'config' => array(
          'allowed_extensions' => 'txt csv tsv xml opml',
          'direct' => FALSE,
          'directory' => 'public://feeds',
          'allowed_schemes' => array(
            0 => 'public',
          ),
        ),
      ),
      'parser' => array(
        'plugin_key' => 'FeedsCSVParser',
        'config' => array(
          'delimiter' => ',',
          'no_headers' => 0,
        ),
      ),
      'processor' => array(
        'plugin_key' => 'FeedsNodeProcessor',
        'config' => array(
          'expire' => '-1',
          'author' => '1',
          'authorize' => 1,
          'mappings' => array(
            0 => array(
              'source' => 'guid',
              'target' => 'field_ams_show_guid',
              'unique' => FALSE,
            ),
            1 => array(
              'source' => 'Show Name',
              'target' => 'title',
              'unique' => FALSE,
            ),
            2 => array(
              'source' => 'Channels',
              'target' => 'field_ams_show_chan',
              'unique' => FALSE,
            ),
            3 => array(
              'source' => 'Show Page Link',
              'target' => 'field_ams_show_url',
              'unique' => FALSE,
            ),
            4 => array(
              'source' => 'Keywords',
              'target' => 'field_ams_show_tags',
              'unique' => FALSE,
            ),
          ),
          'update_existing' => '1',
          'input_format' => 'plain_text',
          'skip_hash_check' => 0,
          'bundle' => 'ams_show',
        ),
      ),
      'content_type' => '',
      'update' => 0,
      'import_period' => '-1',
      'expire_period' => 3600,
      'import_on_create' => 1,
      'process_in_background' => 0,
    );

    $export['ams_csv_shows'] = $feeds_importer;
    return $export;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ams_ctools_plugin_api($module = '', $api = '') {
  if ($module == 'feeds' && $api == 'feeds_importer_default') {
    return array('version' => 1);
  }
}
<?php
/**
* @file
* Module file for assetmanagement.
* Provices custom Functionality for an Asset Management System.
*/

/**
* Implements hook_help().
*/
function assetmanagement_help($path, $arg) {
	switch ($path) {
		case 'admin/help#assetmanagement':{
			$ret_val = '<h3>' . t('About') . '</h3>';
			$ret_val .= '<p>' . t('The Asset Management System helps manage video metadata and passes data to and from thePlatform.') . '</p>';
			return $ret_val;
			break;
		}
	}
}

/**
* Implements hook_permission().
*/
function assetmanagement_permission() {
	return array(
		'administer ams'=> array(
			'title' => t('Administer AMS'),
			'description' => t('Perform Administrative tasks on AMS.')			
		),
		'edit ams'=> array(
			'title' => t('Edit AMS'),
			'description' => t('Perform Content Editor tasks on AMS.')			
		)
		
	);
}
/**
* Implements hook_menu().
*/
function assetmanagement_menu() {
	$items = array();
	
	// Admin configuration group.
	$items['admin/config/assetmanagement'] = array(
		'title' => 'Video Asset Management',
		'description' => 'Administer Video Asset Management System.',
		'access arguments' => array('administer ams'),
	);
	
	// Admin configuration - Settings.
	$items['admin/config/assetmanagement/manage'] = array(
		'title' => 'Manage Asset Management Settings',
		'description' => 'Manage Video Asset Management settings and configuration.',
		'access arguments' => array('administer ams'),
		'page callback' => 'drupal_get_form', 
		'page arguments' => array('assetmanagement_admin_settings_form'),
	);
	
	return $items;
}

/**
* Implements hook_form().
*/
function assetmanagement_admin_settings_form($node, &$form_state) {
	$form = array();
	
	$form['overview'] = array(
		'#markup' => t('This interface allows administrators to manage video AMS settings.'),
		'#prefix' => '<p>',
		'#suffix' => '</p>',
	);
	
	$form['import-publish_control'] = array(
		'#title' => t('Import / Publish Control'),
		'#description' => t('Control the importing or publishing of data between the AMS and thePlatform.'),
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	$form['import-publish_control']['assetmanagement_editor_import'] = array(
		'#title' => t('Editor Imports'),
		'#description' => t('Enable Editors to import new records from thePlaform.'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('assetmanagement_editor_import'),
	);
	$form['import-publish_control']['assetmanagement_editor_publish'] = array(
		'#title' => t('Editor Publishing'),
		'#description' => t('Enable Editors to publish metadata to thePlaform.'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('assetmanagement_editor_publish'),
	);
	$form['import-publish_control']['assetmanagement_blank_records'] = array(
		'#title' => t('Create Blank Records'),
		'#description' => t('If enabled when publishing if no match found a blank or shell record is created in thePlatform.'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('assetmanagement_blank_records'),
	);
	/*
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	*/
	
	// return $form;
	return system_settings_form($form);
}
/**
* Process Asset Management Admin Settings form submission.

function assetmanagement_admin_settings_form_submit($form, &$form_state) {
	// Rebuild the form.
	$form_state['rebuild'] = TRUE;
	
	// Save Asset Management setting variables.
	variable_set('assetmanagement_editor_import', $form_state['values']['assetmanagement_editor_import']);
	variable_set('assetmanagement_editor_publish', $form_state['values']['assetmanagement_editor_publish']);
	variable_set('assetmanagement_blank_records', $form_state['values']['assetmanagement_blank_records']);
	// Notify user
	drupal_set_message(t('Fan-daby-dozy - settings saved'));
}*/